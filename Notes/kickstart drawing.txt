Blitter :

Barrel shifter:  (IN : desc, mask, a_old, a_new; OUT : aout)
Barrel shifter:  (IN : desc, mask, b_old, b_new; OUT : bout)

decalage : 
w_seq_end = vrai si : useDChannel ? BLT_DST_D|BLT_LINE_4 : BLT_SRC_C|BLT_LINE_3
Ensuite, decalage de 4 ticks
Puis : 
cdac_r & cck : 
si r_blt_fsm = INIt :
	r_bltbold <= 0;
	r_bltaold <= 0;
sinon
	r_bltbold <= r_BLTBDAT;
	r_bltaold <= w_bltadat; ( <= r_BLTADAT & r_bltamsk; )
	
	r_bltahold <= w_bltash; // A hold
    r_bltbhold <= w_bltbsh; // B hold

	
a_old = shifter(aout)
b_old = shifter(bout)


Line drawing:

1- BLT_INIT = bltcon1
2- LINE1 = BLTAPTR, (sign)?BLTBMOD/BLTAMOD
3- LINE2 = r_USEx[1] (use C ?), CPTR=> C DAT
3- LINE3 = -
4- LINE4 = SWITCH OCTANT :
	x : ptr/ash(+/-)
	y : ptr+/- modulo



address computation
on clk : et cdac_r & ~cck

si w_mod_add
r_ptr_wr_val[22:1] <= w_ptr_val + w_mod_rd_val;
sinon si w_mod_sub
r_ptr_wr_val[22:1] <= w_ptr_val - w_mod_rd_val;
sinon
r_ptr_wr_val[22:1] <= w_ptr_val;

calcul r_ptr_wr_val:
Si : 
clk + cdac_r + ~cck + w_mod_add
=> Un CDAC rise sur deux => 4 mhz



w_ptr_val = w_ptr_rd_val[22:1] + w_ptr_inc_val;
w_ptr_rd_val = w_rdat_b = r_mem_blk[address_b];
w_ptr_inc_val = r_pinc_blt_p3 = r_ash_msk[15] & ~bltsign;


FF 01 23 0B => Color 05;  Move 23+46, 0B+28 (69,33)
3A 0B		=> Draw 46+3a; 28+0b (69,33) - (80, 33) : 
OCTANT : octant 0/7	BLTCON1 : F041
dx = 11
dy = 0
4*dy-2*dx = -22 => SIGNFLAG 
ptr_reg_a = -22 = FFDE
mod_a = 4*(-11) = -44 = FFBC
mod_b = 0
dat_a = 8000
mask = FFFF
a_shift = 69^F = 9
dat_b = pattern (FFFF)
b_shift = 0
ptr_c/d = addr first pixel (69,33)
mod_c/d = width bitplane





3A 21		=> Draw 46+3a; 28+21 (80,33) - (80, 49) : octant 6/5	BLTCON1 : 0C41
71 21		=> Draw 46+71; 28+21 (80,49) - (B7, 49) : octant 0/7
71 0B		=> Draw 46+71; 28+0B (B7,49) - (B7, 33) : octant 1/3
7D 0B		=> Draw              (B7,33) - (C3, 33) : octant 0/7 : rien...
  88 16 88 5E 7F 5E 7F 38 40 38
3E 36 35 36 34 38 2D 38 2D 41 23 48 23 0B FE 02 25 45 FF 01 21 48 21 0A
7E 0A 8A 16 8A 5F 56 5F 56 64 52 6C 4E 71 4A 74 44 7D 3C 81 3C 8C 0A 8C
0A 6D 09 6D 09 51 0D 4B 14 45 15 41 19 3A 1E 37 21 36 21 36 1E 38 1A 3A
16 41 15 45 0E 4B 0A 51 0A 6C 0B 6D 0B 8B 28 8B 28 76 30 76 34 72 34 5F
32 5C 32 52 41 45 41 39 3E 37 3B 37 3E 3A 3E 41 3D 42 36 42 33 3F 2A 46
1E 4C 12 55 12 54 1E 4B 1A 4A 17 47 1A 49 1E 4A 21 48 FF 01 32 3D 34 36
3C 37 3D 3A 3D 41 36 41 32 3D FF 01 33 5C 33 52 42 45 42 39 7D 39 7D 5E
34 5E 33 5A FF 01 3C 0B 6F 0B 6F 20 3C 20 3C 0B FF 01 60 0E 6B 0E 6B 1C
60 1C 60 0E FE 03 3E 1F FF 01 62 0F 69 0F 69 1B 62 1B 62 0F FE 02 63 1A
FF 01 2F 39 32 39 32 3B 2F 3F 2F 39 FF 01 29 8B 29 77 30 77 35 72 35 69
39 6B 41 6B 41 6D 45 72 49 72 49 74 43 7D 3B 80 3B 8B 29 8B FF 01 35 5F
35 64 3A 61 35 5F FF 01 39 62 35 64 35 5F 4A 5F 40 69 3F 69 41 67 3C 62
39 62 FF 01 4E 5F 55 5F 55 64 51 6C 4E 70 49 71 46 71 43 6D 43 6A 4E 5F
FF 01 44 6A 44 6D 46 70 48 70 4C 6F 4D 6C 49 69 44 6A FF 01 36 68 3E 6A
40 67 3C 63 39 63 36 65 36 68 FF 01 7E 0B 89 16 89 5E FE 01 22 0B FE 01
3B 0B FE 01 61 0F FE 01 6A 1B FE 01 70 0F FE 01 7E 5E FE 01 4B 60 FE 01
2E 39 FF FF


kickstart :
1/ FCADCA. Width = 1; Height = 1; 
BLATCON0 : 0
BLATCON1 : 0
=> No output
2/  FC570E. Width = 3 ; h = 1
BLATCON0 : 3ea
BLATCON1 : 0
addr_c : 0xACBF
3/ FC570E
w = 0x17; h = 0x2
bltcon0 = 0xbea => a, c, d; minterm = ea => 4a + 80 = 80 + 40 + 8 + 2
bltcon1 = 8041 => LINE1
addr 